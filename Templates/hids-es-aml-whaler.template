AWSTemplateFormatVersion: '2010-09-09'
Description: new HIDS CloudWatch Logs ElasticSearch Stack,**WARNING** This template creates an EC2 instance, a CloudWatch Logs Group, AWS Lambda function, and an Elasticsearch Domain. You will be billed for the AWS resources used if you create a stack from this template. Licensed under the Apache License, 2.0.
Mappings:
  RegionMap:
    ap-northeast-1:
      AmznLinux: ami-56d4ad31
    ap-northeast-2:
      AmznLinux: ami-dac312b4
    ap-south-1:
      AmznLinux: ami-34b4c05b
    ap-southeast-1:
      AmznLinux: ami-dc9339bf
    ap-southeast-2:
      AmznLinux: ami-1c47407f
    eu-central-1:
      AmznLinux: ami-af0fc0c0
    eu-west-1:
      AmznLinux: ami-70edb016
    sa-east-1:
      AmznLinux: ami-80086dec
    us-east-1:
      AmznLinux: ami-0b33d91d
    us-east-2:
      AmznLinux: ami-c55673a0
    us-west-1:
      AmznLinux: ami-165a0876
    us-west-2:
      AmznLinux: ami-f173cc91
Parameters:
  HIDSInstanceSize:
    Default: "t2.micro"
    Description: Instance size for OSSEC Test Instances.
    Type: String
    AllowedValues:
      - "t2.micro"
      - "t2.small"
      - "t2.medium"
  ESInstanceSize:
    Default: "t2.small.elasticsearch"
    Description: Instance size for Elasticsearch Instance.
    Type: String
    AllowedValues:
      - "t2.small.elasticsearch"
      - "t2.medium.elasticsearch"
      - "m3.large.elasticsearch"
      - "m3.xlarge.elasticsearch"
      - "m3.2xlarge.elasticsearch"
  MyS3Bucket:
    Description: An S3 Bucket containing the Lambda zipped deployment package. Must be in the region where the stack is launched.
    Type: String
    Default: "bucket4hids11"
  MyS3Key:
    Description: The path to zipped deployment package within the bucket. Must be in the region where the stack is launched.
    Type: String
    Default: "hids-lambda-consumer.zip"
  MyKeyPair:
    Default: 'Key4'
    Description: Public/private key pair, which allows you to connect securely toyour instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  MyTrustedNetwork:
    Default: "34.253.237.221/32"
    Description: (Bastion host ip here:) Only connections from this network are allowed to your Elasticsearch Domain or EC2 instances. Enter an IP or CIDR E.g. 1.1.1.1/24 or 10.10.10.10/32
    Type: String
  VPCId:
    Default: 'vpc-04c3eadc6bf42e0a3'
    Description: Please provide a VPC to deploy the solution into.
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Default: 'subnet-0d883c0f95a5d977e'
    Description: Please provide a subnet id with outbound connectivity within the VPC you selected above.
    Type: AWS::EC2::Subnet::Id
  AssignPublicIP:
    Description: Assign a public IP to the EC2 instances? Set to true if you connect out through an Internet Gateway or leave as false if you connect through a NAT Gateway.
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
Conditions:
  AssignPubIp:
    !Equals [ !Ref AssignPublicIP, true ]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Instance Configuration
      Parameters:
      - HIDSInstanceSize
      - ESInstanceSize
      - MyKeyPair
    - Label:
        default: S3 Configuration
      Parameters:
      - MyS3Bucket
      - MyS3Key
      - MyKeyPair
    - Label:
        default: Network Configuration
      Parameters:
      - VPCId
      - SubnetId
      - AssignPublicIP
      - MyTrustedNetwork
    ParameterLabels:
      HIDSInstanceSize:
        default: EC2 instance size for test server
      ESInstanceSize:
        default: Elasticsearch instance size
      MyS3Bucket:
        default: In region S3 bucket with zipped Lambda deployment package
      MyS3Key:
        default: In region S3 key for zipped Lambda deployment package
      MyKeyPair:
        default: SSH Key Pair
      MyTrustedNetwork:
        default: Trusted Network CIDR
      VPCId:
        default: Target VPC for solution
      Subnet:
        default: Subnet to launch instance into
      AssignPublicIP:
        default: Assign Public IP for EC2
Resources:
  HIDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Incoming Traffic Group
      SecurityGroupIngress:
      - CidrIp:
          Ref: MyTrustedNetwork
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp:
          Ref: MyTrustedNetwork
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp:
          Ref: MyTrustedNetwork
        FromPort: '2375'
        IpProtocol: tcp
        ToPort: '2375'
      VpcId:
        Ref: VPCId
      Tags:
      - Key: Name
        Value: hids-security-group
  HIDSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
  HIDSInstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "hids_ec2_cwl_policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
            Resource: "arn:aws:logs:*:*:*"
      Roles:
        -
          Ref: "HIDSInstanceRole"
  HIDSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: HIDSInstanceRole
  HIDSLinuxHost01:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
            HIDS_Install:
              - configure_hids
              - install_hids
              - start_hids
              - install_whaler
        configure_hids:
          files:
            /tmp/preloaded-vars.conf :
              content: !Sub |
                USER_LANGUAGE="en";
                USER_NO_STOP="y";
                USER_INSTALL_TYPE="local";
                USER_DIR="/var/ossec";
                USER_ENABLE_SYSCHECK="y";
                USER_ENABLE_ROOTCHECK="y";
                USER_UPDATE_RULES="y";
                USER_ENABLE_EMAIL="n";
                USER_ENABLE_FIREWALL_RESPONSE="n";
                USER_ENABLE_ACTIVE_RESPONSE="n";
              mode: "000644"
              owner: "root"
              group: "root"
            /etc/awslogs/awslogs.conf :
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-stat
                [/var/ossec/logs/alerts/alerts.json]
                file = /var/ossec/logs/alerts/alerts.json
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            download:
              cwd: /tmp
              env:
                ossec_version: "2.9.0"
              command: "(wget https://github.com/ossec/ossec-hids/archive/${ossec_version}.tar.gz && mv ${ossec_version}.tar.gz ossec-hids-${ossec_version}.tar.gz)"
            unzip:
              cwd: /tmp
              env:
                ossec_version: "2.9.0"
                ossec_checksum: "abd5741dc474cbce5cc116f46a5ef2528c847918"
              command: "(checksum=$(sha1sum ossec-hids-${ossec_version}.tar.gz | cut -d\" \" -f1); if [ $checksum == $ossec_checksum ]; then tar xfz ossec-hids-${ossec_version}.tar.gz && cd ossec-hids-${ossec_version} ; else \"Wrong checksum. Download again or check if file has been tampered with.\"; fi)"
        install_hids:
          commands:
            install:
              cwd: /tmp
              env:
                ossec_version: "2.9.0"
              command: "(cp /tmp/preloaded-vars.conf /tmp/ossec-hids-${ossec_version}/etc/ && cd /tmp/ossec-hids-${ossec_version} && ./install.sh)"
        install_whaler:
          commands:
            download:
              command:
                "curl https://raw.githubusercontent.com/slow-J/whaler/master/getwhaleraml.sh | sudo sh"
            start_whaler:
              command:
                "cd /whaler && ./reset-reploy.sh -d"
        start_hids:
          commands:
            start1:
              env:
                aws_region: !Ref AWS::Region
              command:
                "sed -i '/<global>/a \\    \\<jsonout_output>yes<\\/jsonout_output>' /var/ossec/etc/ossec.conf; sed -i \"/region/c region=${aws_region}\" /etc/awslogs/awscli.conf"
            start2:
              command:
                "sed -i '/Files to monitor/a \\  \\<localfile>\\n \\    \\<log_format>apache<\\/log_format>\\n \\    \\<location>\\/var\\/log\\/httpd\\/access_log<\\/location>\\n\\  \\<\\/localfile>\\n\\n\\  \\<localfile>\\n \\    \\<log_format>syslog<\\/log_format>\\n \\    \\<location>\\/var\\/tmp\\/whaler\\/whaler.log<\\/location>\\n\\  \\<\\/localfile>' /var/ossec/etc/ossec.conf"
            start3:
              waitAfterCompletion: 15
              env:
                log_group: !Ref HIDSAlerts
              command:
                "/var/ossec/bin/ossec-control start; sed -i \"/alerts.json]/a log_group_name=${log_group}\" /etc/awslogs/awslogs.conf"
            start4:
              command:
                "chkconfig awslogs on && service awslogs start; chkconfig httpd on && service httpd start"
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AmznLinux
      InstanceType:
        Ref: HIDSInstanceSize
      IamInstanceProfile:
        Ref: HIDSInstanceProfile
      KeyName:
        Ref: MyKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress:
            !If [AssignPubIp, true, false]
          DeviceIndex: "0"
          GroupSet:
            - Ref: HIDSSecurityGroup
          SubnetId:
            Ref: SubnetId
      Tags:
      - Key: Name
        Value: hids-linux-test-host01
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y gcc awslogs httpd telnet
          /usr/bin/aws configure set region ${AWS::Region}
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource HIDSLinuxHost01 --configsets HIDS_Install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource HIDSLinuxHost01 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  HIDSAlerts:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join [ "", ["hids-alerts-0", !Ref "AWS::Region"]]
      RetentionInDays: 7
  HIDSESDomain:
        Type: "AWS::Elasticsearch::Domain"
        Properties:
          DomainName: !Join [ "", ["hids-alerts-0", !Ref "AWS::Region"]]
          ElasticsearchClusterConfig:
            DedicatedMasterEnabled: "false"
            InstanceCount: "1"
            ZoneAwarenessEnabled: "false"
            InstanceType:
              Ref: "ESInstanceSize"
          ElasticsearchVersion: 5.1
          EBSOptions:
            EBSEnabled: true
            Iops: 0
            VolumeSize: 10
            VolumeType: "gp2"
          SnapshotOptions:
            AutomatedSnapshotStartHour: "0"
          AccessPolicies:
            Version: "2012-10-17"
            Statement:
              -
                Principal:
                  AWS: "*"
                Action: "es:ESHttp*"
                Effect: "Allow"
                Condition:
                  IpAddress:
                    aws:SourceIp:
                      - Ref: MyTrustedNetwork
                Resource: "arn:aws:es:*"
          AdvancedOptions:
            rest.action.multi.allow_explicit_index: "true"
          Tags:
          - Key: Name
            Value: hids-es-domain
  HIDSLambdaConsumer:
        Type: AWS::Lambda::Function
        Properties:
            Description: "HIDS Alerts CloudWatch Logs to Amazon ES streaming"
            Handler : "index.handler"
            MemorySize: 128
            Timeout: 300
            Role:
              Fn::GetAtt:
                - "HIDSLambdaRole"
                - "Arn"
            Runtime : "nodejs10.x"
            Environment:
              Variables:
                ES_ENDPOINT: !GetAtt HIDSESDomain.DomainEndpoint
            Code:
              S3Bucket: !Ref MyS3Bucket
              S3Key: !Ref MyS3Key
  HIDSLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              "sts:AssumeRole"
      Path: "/"
  HIDSLambdaPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: "hids_lambda_consumer_policy"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:GetLogEvents"
                - "logs:DescribeLogStreams"
              Resource: "arn:aws:logs:*:*:*"
            -
              Effect: "Allow"
              Action:
                - "es:ESHttpPost"
              Resource: "arn:aws:es:*:*:*"
        Roles:
          -
            Ref: "HIDSLambdaRole"
  HIDSLambdaInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "HIDSLambdaConsumer"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: !Join [ "", ["logs.", !Ref "AWS::Region", ".amazonaws.com"]]
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn:
        Fn::GetAtt:
          - HIDSAlerts
          - Arn
  HIDSFilter:
    DependsOn: HIDSLambdaInvoke
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      LogGroupName:
        !Join [ "", ["hids-alerts-0", !Ref "AWS::Region"]]
      FilterPattern: ""
      DestinationArn:
        !GetAtt
          HIDSLambdaConsumer.Arn
Outputs:
  HIDSESKibanaURL:
    Description: Elastic Search Kibana Endpoint.
    Value:
      !Join [ "", ["https://", !GetAtt "HIDSESDomain.DomainEndpoint", "/_plugin/kibana/"]]
  HIDSLinuxHost01:
    Description: First Test EC2 Instance Internal IP Address.
    Value:
      Fn::GetAtt:
      - HIDSLinuxHost01
      - PrivateIp
  HIDSLambdaConsumer:
    Description: HIDS Lambda Consumer Function.
    Value:
      Ref: HIDSLambdaConsumer
  HIDSSecurityGroup:
    Description: The HIDS Security Group ID.
    Value:
      Ref: HIDSSecurityGroup
  Region:
    Description: Region of the stack.
    Value:
      Ref: AWS::Region
